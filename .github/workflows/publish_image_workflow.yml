name: Publish Docker Image

on:
    push:
        branches:
            - main

permissions:
    contents: write

jobs:
    unit-tests:
        name: Unit Tests
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up JDK 21
              uses: actions/setup-java@v4
              with:
                  java-version: "21"
                  distribution: "temurin"
                  cache: "gradle"

            - name: Grant execute permission for gradlew
              run: chmod +x gradlew

            - name: Run Unit Tests
              run: ./gradlew test --tests "*Test" --no-daemon

            - name: Upload Unit Test Report
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: unit-test-report
                  path: build/reports/tests/test/
                  retention-days: 7

    integration-tests:
        name: Integration Tests
        runs-on: ubuntu-latest
        needs: unit-tests

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up JDK 21
              uses: actions/setup-java@v4
              with:
                  java-version: "21"
                  distribution: "temurin"
                  cache: "gradle"

            - name: Grant execute permission for gradlew
              run: chmod +x gradlew

            - name: Run Integration Tests
              run: ./gradlew test --tests "*IntegrationTest" --no-daemon

            - name: Upload Integration Test Report
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: integration-test-report
                  path: build/reports/tests/test/
                  retention-days: 7

    push-docker-image:
        name: Build and Push Docker Image
        runs-on: ubuntu-latest
        needs: [unit-tests, integration-tests]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Build and push Docker image
              run: |
                  docker build -t mrshoffen/task-tracker-scheduler:latest .
                  docker images
                  docker push mrshoffen/task-tracker-scheduler:latest

            - name: Extract version from build.gradle
              id: extract-version
              run: |
                  VERSION=$(grep "version =" build.gradle | cut -d "'" -f 2)
                  echo "Extracted version: $VERSION"
                  echo "version=$VERSION" >> $GITHUB_OUTPUT

            - name: Create Git tag
              if: steps.extract-version.outputs.version != ''
              run: |
                  git config --global user.name "GitHub Actions"
                  git config --global user.email "actions@github.com"
                  git tag -a "${{ steps.extract-version.outputs.version }}" -m "Release ${{ steps.extract-version.outputs.version }}"
                  git push origin "${{ steps.extract-version.outputs.version }}"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ steps.extract-version.outputs.version }}
                  release_name: Release ${{ steps.extract-version.outputs.version }}
                  body: |
                      Автоматический релиз для версии ${{ steps.extract-version.outputs.version }}
                      Изменения: https://github.com/${{ github.repository }}/compare/previous-tag...${{ github.sha }}
                  draft: false
                  prerelease: false

            - name: Send Event
              uses: peter-evans/repository-dispatch@v3
              with:
                  token: ${{ secrets.PAT_WORKFLOW }}
                  repository: MrShoffen/task-tracker
                  event-type: update_submodule
                  client-payload: |
                      {
                        "source_repo": "${{ github.repository }}",
                        "version": "${{ steps.extract-version.outputs.version }}",
                        "commit_hash": "${{ github.sha }}",
                        "custom_data": {
                          "author": "${{ github.actor }}",
                          "repo": "${{ github.repository }}"
                        }
                      }
